---
import AsideMenu from '@/components/AsideMenu.astro'
import { Player } from '@/components/Player'
import { ViewTransitions } from 'astro:transitions'

interface Props {
  title: string
}

const { title } = Astro.props
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions fallback="none" />
  </head>
  <body>
    <div id="app" class="relative h-screen p-2 gap-2">
      <aside class="[grid-area:aside] flex-col flex overflow-y-auto">
        <AsideMenu />
      </aside>
      <main
        class="[grid-area:main] rounded-lg bg-zinc-900 overflow-y-auto w-full"
      >
        <slot />
      </main>
      <footer class="[grid-area:player] h-[80px]">
        <!-- Por defecto, este player no tiene interactividad. Es un react server component. Necesitamos que astro también lo cargue en el cliente.
        idle: carga el componente cuando no esté cargando más recursos (no muy prioritario)
        load: carga el componente cuando carga la página
        media: carga el comp dependiendo del viewport con una mediaquery, por ejemplo solo movil
        only: que solo se renderice en el cliente. Pero cuidado porque puede haber un flasheo ya que no lo ha cargado antes en el servidor
        visible: lo renderiza en el server, pero en el cliente solo lo carga cuando sea visible (muy bueno para elementos que no están en el viewport. Pero nuestro player siempre está visible)
        -->
        <!-- Hay otro problema: cuando estamos reproduciendo una canción y navegamos, deja de sonar porque pierde el estado. Le tenemos que decir a Astro que persista el componente. Podemos hacer esta persistencia gracias a Astro y a las view transitions apis. Al persistirlo, no lo vuelve a renderizar y conserva su estado aunque cambie la url-->
        <Player client:load transition:name="media-player" transition:persist />
      </footer>
    </div>
    <style>
      #app {
        display: grid;
        grid-template-areas:
          'aside main main'
          'player player player';
        grid-template-columns: 350px 1fr;
        grid-template-rows: 1fr auto;
      }
    </style>
    <style is:global>
      html {
        font-family: 'CircularStd', system-ui, sans-serif;
        background: #010101;
        color: white;
      }

      @font-face {
        font-family: 'CircularStd';
        src: url('/fonts/CircularStd-Medium.woff2') format('woff2');
        font-weight: 500;
        font-style: normal;
        font-display: swap;
      }

      @font-face {
        font-family: 'CircularStd';
        src: url('/fonts/CircularStd-Book.woff2') format('woff2');
        font-weight: 400;
        font-style: normal;
        font-display: swap;
      }

      @font-face {
        font-family: 'CircularStd';
        src: url('/fonts/CircularStd-Light.woff2') format('woff2');
        font-weight: 300;
        font-style: normal;
        font-display: swap;
      }

      @font-face {
        font-family: 'CircularStd';
        src: url('/fonts/CircularStd-Bold.woff2') format('woff2');
        font-weight: 700;
        font-style: normal;
        font-display: swap;
      }

      @font-face {
        font-family: 'CircularStd';
        src: url('/fonts/CircularStd-Black.woff2') format('woff2');
        font-weight: 900;
        font-style: normal;
        font-display: swap;
      }
    </style>
  </body>
</html>
